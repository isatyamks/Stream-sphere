<% layout('/layout/boilerplate.ejs') %>
<script>
    const sidebar = document.querySelector('.sidebar');
    sidebar.remove();
</script>
<style>
  :root {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
    font-family: Arial, sans-serif;
  }
  .cont {
    box-sizing: border-box;
    margin-bottom: -1000px;
    width: 100%;
    display: flex;
    height: 90.7vh;
    color: #333;
  }

  .chat-sidebar {
    width: 5%;
    background-color: #f4f4f4;
    color: #333;
    padding: 20px;
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .chat-sidebar a {
    color: #333;
    text-decoration: none;
    display: block;
    margin: 15px 0;
  }

  .chat-sidebar i {
    font-size: 24px;
  }

  .chat-sidebar p {
    margin: 5px 0 0;
  }

  .logos {
    width: 20%;
    background-color: #e1e1e1;
    color: #333;
    padding: 20px;
    box-sizing: border-box;
    overflow-y: auto;
  }

  .logos .person {
    display: flex;
    align-items: center;
    padding: 10px;
    margin: 10px 0;
    background-color: #fff;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s;
  }

  .logos .person:hover {
    background-color: #ddd;
  }

  .logos .person img {
    border-radius: 50%;
    margin-right: 10px;
  }

  .chat-container {
    width: 100%;
    background-color: #fff;
    padding: 20px;
    box-sizing: border-box;
    border-left: 1px solid #ccc;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  .chat-container h2 {
    margin: 0 0 20px;
  }

  .send {
    background-color: #f4f4f4;
    padding: 10px;
    display: flex;
  }

  .send input {
    flex: 1;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px 0 0 5px;
  }

  .send button {
    padding: 10px;
    border: 1px solid #ccc;
    background-color: #007bff;
    color: #fff;
    border-radius: 0 5px 5px 0;
    cursor: pointer;
  }

  .send button:hover {
    background-color: #0056b3;
  }

  .messages {
    flex-grow: 1;
    overflow-y: auto;
    margin-bottom: 20px;
  }

  .message {
  margin: 10px 0;
  padding: 10px;
  border-radius: 5px;
  max-width: 60%;
}
.cont{
  position: fixed;
  left: 0;
}
.sender-user {
  background-color: #d1e7dd;
  margin-left: auto;
  text-align: left;
}

.receiver-user {
  background-color: #f8d7da;
  margin-right: auto;
  text-align: left;
}
#notification {
      display: none;
      padding: 10px;
      background-color: yellow;
      border: 1px solid black;
      margin: 10px 0;
}
.blue{
  background-color: #007bff;
  color: white;
  padding: 15px;
  border-radius: 50%;
  text-decoration: none;
  display: flex;
  align-items: center;
  justify-content: center;
}
</style>

<body>
  <div class="cont">
    <div class="chat-sidebar">
      <div class="text-center pt-4 margin pb-3">
        <a href="/<%= req.user._id %>/chat">
            <i class="fa-solid fa-user-group"></i>
            <p class="text-center ">&nbsp;Friends</p>
        </a>
      </div>
      <div class="text-center pt-3 pb-3">
        <a href="/<%= req.user._id %>/chat/all">
          <div class="blue">
            <i class="fa-solid fa-plus"></i>
          </div>
        </a>
      </div>
    </div>

    <div class="logos">
      <form id="searchForm" class="d-flex ms-auto" role="search" action="/user/<%= req.user._id %>/search/chat" method="GET">
        <input class="form-control search-inp" type="search" id="searchInput" name="title" placeholder="Search" aria-label="Search">
        <button class="btn search-btn" type="submit"><i class="fa-solid fa-magnifying-glass"></i></button>
      </form>

      <% if ( typeof searchPerformed !== 'undefined' && searchPerformed) { %>
        <% if (friends.length > 0 || nonFriends.length > 0) { %>
          <% friends.forEach(friend => { %>
            <div class="person friend" data-userid="<%= friend._id %>" data-username="<%= friend.username %>">
              <img src="<%= friend.avatar %>" alt="" width="40" height="40">
              <span><%= friend.username %></span>
              <sub class="<%= friend.is_online ? 'text-success' : 'text-danger' %>"><%= friend.is_online ? 'Online' : 'Offline' %></sub>
              <span class="notification-badge" style="display: none;"><i class="fa-solid fa-exclamation"></i></span>
            </div>
          <% }) %>
          <% nonFriends.forEach(user => { %>
            <div class="person non-friend" data-userid="<%= user._id %>" data-username="<%= user.username %>" data-url="/user/<%= req.user._id %>/dashboard/<%= user.username %>">
              <img src="<%= user.avatar %>" alt="" width="40" height="40">
              <span><%= user.username %></span>
              <sub class="<%= user.is_online ? 'text-success' : 'text-danger' %>"><%= user.is_online ? 'Online' : 'Offline' %></sub>
              <span class="notification-badge" style="display: none;"><i class="fa-solid fa-exclamation"></i></span>
            </div>
          <% }) %>
        <% } else { %>
          <p>No users found matching "<%= req.query.title %>"</p>
        <% } %>
      <% } else { %>
        <p>Start a search to find users</p>
      <% } %>
    </div>

    <div class="chat-container">
      <h2>Select a user to start chatting</h2>
      <div id="messages" class="messages"></div>
      <div id="notification" class="notification"></div>
    </div>
  </div>
</body>

<script src="/socket.io/socket.io.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const sender_id = '<%= req.user._id %>';
    let receiver_id = '';
    let currentChatUser = '';

    let isNewMessage = false;
    const socket = io('/users-namespace', {
      auth: {
        userId: sender_id
      }
    });

    socket.on('user status', function(data) {
      const { userId, is_online } = data;
      const personElement = document.querySelector(`.logos .person[data-userid="${userId}"]`);
      if (personElement) {
        const statusElement = personElement.querySelector('sub');
        if (statusElement) {
          statusElement.textContent = is_online ? 'Online' : 'Offline';
          statusElement.className = is_online ? 'text-success' : 'text-danger';
        }
      }
    });

    socket.on('chat message', function(data) {
      if (data.sender_id === receiver_id || data.to === receiver_id) {
        isNewMessage = true;
        const messages = document.getElementById('messages');
        const messageElement = document.createElement('div');
        messageElement.className = data.sender_id === sender_id ? 'message sender-user' : 'message receiver-user';
        messageElement.textContent = `${data.sender_id === sender_id ? 'You' : data.from_username}: ${data.message}`;
        messages.appendChild(messageElement);
        messages.scrollTop = messages.scrollHeight; // Scroll to the bottom
      }
    });

    socket.on('loadChats', function(messages) {
      const messagesContainer = document.getElementById('messages');
      messagesContainer.innerHTML = '';
      messages.forEach(msg => {
        if (msg.sender_id === receiver_id || msg.receiver_id === receiver_id) {
          const messageElement = document.createElement('div');
          messageElement.className = msg.sender_id === sender_id ? 'message sender-user' : 'message receiver-user';
          messageElement.textContent = `${msg.sender_id === sender_id ? 'You' : msg.sender_username}: ${msg.message}`;
          messagesContainer.appendChild(messageElement);
        }
      });
      messagesContainer.scrollTop = messagesContainer.scrollHeight; // Scroll to the bottom
    });

    socket.on('new message notification', function(data) {
      if (!isNewMessage && data.from_username !== currentChatUser) {
        const personElement = document.querySelector(`.logos .person[data-username="${data.from_username}"]`);
        if (personElement) {
          const notificationBadge = personElement.querySelector('.notification-badge');
          if (notificationBadge) {
            notificationBadge.style.display = 'inline';
          }
        }
      }
    });

    const people = document.querySelectorAll('.person');
    const chatContainer = document.querySelector('.chat-container');

    people.forEach(person => {
      person.addEventListener('click', function() {
        const username = this.getAttribute('data-username');
        const newReceiverId = this.getAttribute('data-userid');
        isNewMessage = false;
        if (receiver_id !== newReceiverId) {
          receiver_id = newReceiverId;
          currentChatUser = newReceiverId;

          if (this.classList.contains('friend')) {
            chatContainer.innerHTML = `
              <h2>Chat with ${username}</h2>
              <div id="messages" class="messages"></div>
              <div class="send">
                <input type="text" id="messageInput" placeholder="Type your message here...">
                <button type="submit" id="sendButton">Send</button>
              </div>
            `;

            const sendButton = document.getElementById('sendButton');
            const messageInput = document.getElementById('messageInput');

            function sendMessage(event) {
              event.preventDefault();
              const message = messageInput.value.trim(); 
              if (message) {
                sendButton.disabled = true;
                messageInput.disabled = true;

                $.ajax({
                  type: 'POST',
                  url: `/user/${receiver_id}/chat/save-message`,
                  data: { message: message },
                  success: function(response) {
                    messageInput.value = '';  

                    const newMessage = { to: receiver_id, from: sender_id, message: message };
                    socket.emit('new chat message', newMessage);

                    sendButton.disabled = false;
                    messageInput.disabled = false;
                    messageInput.focus();
                  },
                  error: function(error) {
                    sendButton.disabled = false;
                    messageInput.disabled = false;
                    messageInput.focus();
                  }
                });
              }
            }

            sendButton.addEventListener('click', sendMessage);
            messageInput.addEventListener('keypress', function(event) {
              if (event.key === 'Enter' && !sendButton.disabled) {
                sendMessage(event);
              }
            });

            const notificationBadge = this.querySelector('.notification-badge');
            if (notificationBadge) {
              notificationBadge.style.display = 'none';  
            }

            socket.emit('mark as seen', { sender_id: sender_id, receiver_id: receiver_id });
          } else {
            const userDashboardUrl = this.getAttribute('data-url');
            window.location.href = userDashboardUrl;
          }
        }
        socket.emit('existchat', { sender_id: sender_id, receiver_id: receiver_id });
      });
    });
  });
</script>
